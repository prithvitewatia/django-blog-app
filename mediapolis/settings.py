"""
Django settings for blog_app_project project.

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
import json

from django.urls import reverse_lazy
import sentry_sdk

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
with open('config.json') as config_file:
    config = json.load(config_file)
    config = config['config']

SECRET_KEY = config['secret']
SECRET_KEY_FALLBACK = config['fallback_secret_key']
DEBUG = config['DEBUG'] or False
ALLOWED_HOSTS = config['ALLOWED_HOSTS']

SECURE_SSL_REDIRECT = config["SECURE-SSL-REDIRECT"]
CSRF_COOKIE_SECURE = config["CSRF-COOKIE-SECURE"]
SESSION_COOKIE_SECURE = config["SESSION-COOKIE-SECURE"]

SECURE_HSTS_SECONDS = config["HSTS"]["MAXAGE"]
SECURE_HSTS_INCLUDE_SUBDOMAINS = config["HSTS"]["INCLUDE-SUBDOMAINS"]
SECURE_HSTS_PRELOAD = config["HSTS"]["PRELOAD"]

sentry_sdk.init(
    dsn=config['sentry_dsn'],
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    "users",
    "blog_app",
    "gateway",
    "tinymce",
    "file_manager",
    "crispy_forms",
    "storages",
    "crispy_bootstrap4",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "mediapolis.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mediapolis.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config['DATABASE']['DB_NAME'],
        'USER': config['DATABASE']['DB_USER'],
        'PASSWORD': config['DATABASE']['DB_PASSWORD'],
        'HOST': config['DATABASE']['DB_HOST'],
        'PORT': config['DATABASE']['DB_PORT'],
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = config['static_url']

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = reverse_lazy("blog_app:index")
LOGOUT_REDIRECT_URL = reverse_lazy("users:login")

MEDIA_URL = config['media_url']
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CRISPY_TEMPLATE_PACK = 'bootstrap4'
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"

STATIC_ROOT = os.path.join(BASE_DIR, STATIC_URL)

TINY_MCE_CONFIG = config["TINY_MCE"]
TINYMCE_API_KEY = TINY_MCE_CONFIG.get("API-KEY", "no-api-key")
TINYMCE_DEFAULT_CONFIG = TINY_MCE_CONFIG["DEFAULT-CONFIG"]
TINYMCE_SPELLCHECKER = TINY_MCE_CONFIG.get("SPELLCHECKER", False)
TINYMCE_COMPRESSOR = TINY_MCE_CONFIG.get("COMPRESSOR", False)

AWS_ACCESS_KEY_ID = config["AWS"]["ACCESS-KEY-ID"]
AWS_SECRET_ACCESS_KEY = config["AWS"]["SECRET-ACCESS-KEY"]
AWS_S3_REGION_NAME = config["AWS"]["REGION"]
AWS_S3_ENDPOINT_URL = config["AWS"]["ENDPOINT-URL"]
AWS_QUERYSTRING_AUTH = config["AWS"]["QUERYSTRING_AUTH"]
AWS_S3_USE_SSL = config["AWS"]["USE_SSL"]
AWS_DEFAULT_ACL = config["AWS"]["DEFAULT_ACL"]
AWS_S3_MAX_MEMORY_SIZE = config["AWS"]["MAX-MEMORY_SIZE"]
AWS_DEFAULT_BUCKET_NAME = config["AWS"]["DEFAULT_BUCKET_NAME"]
AWS_STATIC_BUCKET_NAME = config["AWS"]["STATIC_BUCKET_NAME"]
AWS_S3_CUSTOM_DOMAIN = config["AWS"]["CUSTOM-DOMAIN"]
AWS_CLOUDFRONT_KEY_ID = config["AWS"]["CLOUDFRONT-KEY-ID"]
AWS_CLOUDFRONT_KEY = config["AWS"]["CLOUDFRONT-KEY"]

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            'bucket_name': AWS_DEFAULT_BUCKET_NAME
        }
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            'bucket_name': AWS_STATIC_BUCKET_NAME
        }
    }
}

